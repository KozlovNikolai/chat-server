name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/msc"
  IMAGE_NAME: "chat-server"
  CONTAINER_NAME: "chat-server-container"

jobs:
  linter:
    name: lint
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.7'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53
          args: --timeout=30m --config=./.golangci.pipeline.yaml --issues-exit-code=0

  image-build-and-push:
    
    runs-on: ubuntu-22.04
    needs: linter
    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f ./dockerfile .

  deploy-image:
    runs-on: ubuntu-22.04
    needs: image-build-and-push

    steps:
      - name: Deploy to Selectel cloud via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME
          script: |
            # Setup variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)

            # Login to Docker Registry
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

            # Stop running container
            docker stop $CONTAINER_NAME

            # Remove old container
            docker rm $CONTAINER_NAME

            # Run a new container from  a new image
            docker run -d -p 50062:50051 --name $CONTAINER_NAME $REGISTRY/$IMAGE_NAME:$TAG_NAME
